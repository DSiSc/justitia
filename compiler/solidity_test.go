// Copyright 2015 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package compiler

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"os/exec"
	"testing"
)

var contractName = "Test"
var contract = fmt.Sprintf("contracts/%s.sol", contractName)
var byteCode = "608060405234801561001057600080fd5b506040805190810160405280600d81526020017f48" +
	"656c6c6f2c20776f726c642e0000000000000000000000000000000000000081525060009080519060200190" +
	"61005c929190610062565b50610107565b828054600181600116156101000203166002900490600052602060" +
	"002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101" +
	"855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b50905061" +
	"00de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b50" +
	"90565b90565b610410806101166000396000f300608060405260043610610057576000357c01000000000000" +
	"00000000000000000000000000000000000000000000900463ffffffff168063a41368621461005c578063cf" +
	"ae3217146100c5578063ef690cc014610155575b600080fd5b34801561006857600080fd5b506100c3600480" +
	"360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040" +
	"52809392919081815260200183838082843782019150505050505091929192905050506101e5565b005b3480" +
	"156100d157600080fd5b506100da6101ff565b60405180806020018281038252838181518152602001915080" +
	"51906020019080838360005b8381101561011a5780820151818401526020810190506100ff565b5050505090" +
	"5090810190601f1680156101475780820380516001836020036101000a031916815260200191505b50925050" +
	"5060405180910390f35b34801561016157600080fd5b5061016a6102a1565b60405180806020018281038252" +
	"83818151815260200191508051906020019080838360005b838110156101aa57808201518184015260208101" +
	"905061018f565b50505050905090810190601f1680156101d75780820380516001836020036101000a031916" +
	"815260200191505b509250505060405180910390f35b80600090805190602001906101fb92919061033f565b" +
	"5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190" +
	"810160405280929190818152602001828054600181600116156101000203166002900480156102975780601f" +
	"1061026c57610100808354040283529160200191610297565b820191906000526020600020905b8154815290" +
	"6001019060200180831161027a57829003601f168201915b5050505050905090565b60008054600181600116" +
	"156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182" +
	"8054600181600116156101000203166002900480156103375780601f1061030c576101008083540402835291" +
	"60200191610337565b820191906000526020600020905b81548152906001019060200180831161031a578290" +
	"03601f168201915b505050505081565b82805460018160011615610100020316600290049060005260206000" +
	"2090601f016020900481019282601f1061038057805160ff19168380011785556103ae565b82800160010185" +
	"5582156103ae579182015b828111156103ad578251825591602001919060010190610392565b5b5090506103" +
	"bb91906103bf565b5090565b6103e191905b808211156103dd5760008160009055506001016103c5565b5090" +
	"565b905600a165627a7a723058201d1b4d83c19112951736f293895a5ce019824f64f43d4ef72f7e57f6a3344c060029"

func skipWithoutSolc(t *testing.T) {
	if _, err := exec.LookPath("solc"); err != nil {
		t.Skip(err)
	}
}

func TestCompileSolidityString(t *testing.T) {
	skipWithoutSolc(t)
	contracts, err := CompileSolidityString(contract)
	if err != nil {
		t.Fatalf("error compiling source. result %v: %v", contracts, err)
	}

	if len(contracts) != 1 {
		t.Errorf("one contract expected, got %d", len(contracts))
	}
	c, ok := contracts["Test"]
	if !ok {
		c, ok = contracts["<stdin>:Test"]
		if !ok {
			t.Fatal("info for contract 'test' not present in result")
		}
	}
	if c.Code == "" {
		t.Error("empty code")
	}
	assert.Equal(t, c.Info.CompilerVersion, "0.4.25")
	assert.Equal(t, contract, c.Info.Source)
	assert.Equal(t, byteCode, c.Code)
}

func TestSolidityCompile(t *testing.T) {
	skipWithoutSolc(t)
	contractCode := SolidityCompile(contractName)
	assert.Equal(t, byteCode, contractCode)
}
