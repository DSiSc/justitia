package config

import (
	"github.com/DSiSc/justitia/tools"
	"github.com/DSiSc/monkey"
	"github.com/stretchr/testify/assert"
	"testing"
)

// test build default genesis block
func TestBuildDefaultGensisBlock(t *testing.T) {
	assert := assert.New(t)
	monkey.Patch(tools.PathExists, func(string) bool {
		return false
	})
	block, err := GenerateGenesisBlock()
	assert.NotNil(block)
	assert.Nil(err)
	monkey.UnpatchAll()
}

// test build genesis block from config file
func TestBuildGensisBlockFromFile(t *testing.T) {
	assert := assert.New(t)
	block, err := GenerateGenesisBlock()
	assert.NotNil(block)
	assert.Nil(err)
	assert.Equal(uint64(3), uint64(len(block.GenesisAccounts)))
	assert.Equal(uint64(0), block.Block.Header.Height)
}

func TestGetSwitchConf(t *testing.T) {
	a1 := "608060405234801561001057600080fd5b506040805190810160405280600d81526020017f48656c6c6f2c20776f726c642e000000000000000000000000000000000000008152506001908051906020019061005c9291906100a2565b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610147565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e357805160ff1916838001178555610111565b82800160010185558215610111579182015b828111156101105782518255916020019190600101906100f5565b5b50905061011e9190610122565b5090565b61014491905b80821115610140576000816000905550600101610128565b5090565b90565b6102d7806101566000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a413686214610051578063cfae3217146100ba575b600080fd5b34801561005d57600080fd5b506100b8600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061014a565b005b3480156100c657600080fd5b506100cf610164565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010f5780820151818401526020810190506100f4565b50505050905090810190601f16801561013c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b8060019080519060200190610160929190610206565b5050565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061024757805160ff1916838001178555610275565b82800160010185558215610275579182015b82811115610274578251825591602001919060010190610259565b5b5090506102829190610286565b5090565b6102a891905b808211156102a457600081600090555060010161028c565b5090565b905600a165627a7a72305820a672b153f3ce4d3e063a77f77fac751593a62767ca7f3fb6ce83b68f61d741140029"
	new1 := tools.Hex2Bytes(a1)
	assert.NotNil(t, new1)
}
